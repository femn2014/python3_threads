#至于又称微线程，纤程。英文名Coroutine。
# 子程序，或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕。
# 所以子程序调用是通过栈实现的，一个线程就是执行一个子程序。
# 子程序调用总是一个入口，一次返回，调用顺序是明确的。而协程的调用和子程序不同
# 协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。

#看起来A、B的执行有点像多线程，但协程的特点在于是一个线程执行，那和多线程比，协程有何优势？
# 最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。
# 第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。
# 因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能


# 传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁。
# 如果改用协程，生产者生产消息后，直接通过yield跳转到消费者开始执行，待消费者执行完毕后，切换回生产者继续生产，效率极高
import time
def consumer():
    r = ''
    print('two')
    while True:
        # 协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。
        print('three')
        # 2.1 在此等待produce的信息 n
        n = yield r # 3. consumer通过yield拿到消息，处理，又通过yield把结果传回
        print('four')
        if not n: return print('[CONSUMER] Consuming %s...' % n)# n为计数器
        print(n)
        time.sleep(1)
        r = '200 OK' # 4.1 consumer处理的结果 yield y

def produce(c):
    next(c) # 不是值 1. 启用生成器
    n = 0
    while n < 5:
        n = n + 1
        print('[PRODUCER] Producing %s...' % n)
        r = c.send(n) # 这里才是迭代器中的值 2.2 一旦生产了东西，通过c.send(n)切换到consumer执行
        print('[PRODUCER] Consumer return: %s' % r) # 4.2 produce拿到consumer处理的结果，继续生产下一条消息
    c.close() # 5. produce决定不生产了，通过c.close()关闭consumer，整个过程结束

if __name__ == '__main__':
    c = consumer()
    produce(c)
#整个流程无锁，由一个线程执行，produce和consumer协作完成任务，所以称为“协程”，而非线程的抢占式多任务。 子程序就是协程的一种特例.
# 线程确实比协程性能更好。因为线程能利用多核达到真正的并行计算，如果任务设计的好，线程能几乎成倍的提高你的计算能力，说线程性能不好的很多 是因为没有设计好导致大量的锁，切换，等待，这些很多都是应用层的问题.
# 而协程因为是非抢占式，所以需要用户自己释放使用权来切换到其它协程，因此 同一时间其实只有一个协程拥有运行权，相当于单线程的能力
